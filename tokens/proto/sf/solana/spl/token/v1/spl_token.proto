syntax = "proto3";

package sf.solana.spl.token.v1;

message Events {
  repeated Event data = 1;
}

message Event {
  oneof type {
    Transfer transfer = 10;
    InitializeMint initialize_mint = 11;
    InitializeImmutableOwner initialize_immutable_owner = 12;
    InitializeAccount initialize_account = 13;
    InitializeMultisig initialize_multisig = 14;
    Approve approve = 15;
    MintTo mint_to = 16;
    Revoke revoke = 17;
    SetAuthority set_authority = 18;
    Burn burn = 19;
    CloseAccount close_account = 20;
    FreezeAccount freeze_account = 22;
    ThawAccount thaw_account = 23;
    SyncNative sync_native = 24;
  }

  string txn_id = 101;
  uint64 block_height = 102;
  int64 block_timestamp = 103;
  string block_hash = 104;
  uint32 instruction_index = 106;
}

// The instructions 'Transfer' and 'TransferChecked' are both represented by this message.
// You can check if the instructions was 'TransferChecked' by inspecting the 'accounts.token_mint',
// if set, it was a 'TransferChecked' instruction.
message Transfer {
  TransferInstruction instruction = 1;
  TransferAccounts accounts = 2;

  message TransferInstruction {
    uint64 amount = 1;
    // Only set if the instruction was 'TransferChecked'
    optional uint32 decimals = 2;
  }

  message TransferAccounts {
    string source = 1;
    // Only set if the instruction was 'TransferChecked'
    optional string token_mint = 2;
    string destination = 3;
    Signer signer = 4;
  }
}

message InitializeMint {
  InitializeMintVersion version = 1;
  InitializeMintInstruction instruction = 2;
  InitializeMintAccounts accounts = 3;

  enum InitializeMintVersion {
    UNSPECIFIED = 0;
    V1 = 1;
    V2 = 2;
  }

  message InitializeMintInstruction {
    uint32 decimals = 1;
    string mint_authority = 2;
    optional string freeze_authority = 3;
  }

  message InitializeMintAccounts {
    string mint = 1;
  }
}

// The instructions 'InitializeAccount', 'InitializeAccount2' and 'InitializeAccount3'
// are all represented by this message. The 'InitializeAccount2'
// instruction's which has pubkey in isntruction is mapped to
// `accoubts.owner` like in the V1 case. The V3 case is that same as V2 without the
// rent account that we don't track.
//
// You can use the `version` field (1 or 2) to determine which instruction
// is being used.
message InitializeAccount {
  InitializeAccountVersion version = 1;
  InitializeAccountInstruction instruction = 2;
  InitializeAccountAccounts accounts = 3;

  enum InitializeAccountVersion {
    UNSPECIFIED = 0;
    V1 = 1;
    V2 = 2;
    V3 = 3;
  }

  message InitializeAccountInstruction {
  }

  message InitializeAccountAccounts {
    string account = 1;
    string mint = 2;
    string owner = 3;
  }
}

message InitializeMultisig {
  InitializeMultisigVersion version = 1;
  InitializeMultisigInstruction instruction = 2;
  InitializeMultisigAccounts accounts = 3;

  enum InitializeMultisigVersion {
    UNSPECIFIED = 0;
    V1 = 1;
    V2 = 2;
  }

  message InitializeMultisigInstruction {
    // The number of signers required to approve transactions, equivalent to `m` in SPL Token
    uint32 signature_count_threshold = 1;
  }

  message InitializeMultisigAccounts {
    string account = 1;
    repeated string signers = 2;
  }
}

// The instructions 'Approve' and 'ApproveChecked' are both represented by this message.
// You can check if the instructions was 'ApproveChecked' by inspecting the 'accounts.token_mint',
// if set, it was a 'ApproveChecked' instruction.
message Approve {
  ApproveInstruction instruction = 1;
  ApproveAccounts accounts = 2;

  message ApproveInstruction {
    uint64 amount = 1;
    // Only set if the instruction was 'ApproveChecked'
    optional uint32 decimals = 2;
  }

  message ApproveAccounts {
    string source = 1;
    // Only set if the instruction was 'ApproveChecked'
    optional string token_mint = 2;
    string delegate = 3;
    Signer signer = 4;
  }
}

message Revoke {
  RevokeInstruction instruction = 1;
  RevokeAccounts accounts = 2;

  message RevokeInstruction {
  }

  message RevokeAccounts {
    string source = 1;
    Signer signer = 2;
  }
}

message SetAuthority {
  SetAuthorityInstruction instruction = 1;
  SetAuthorityAccounts accounts = 2;

  enum AuthorityType {
    AuthorityNull = 0;
    AuthorityMintTokens = 1;
    AuthorityFreezeAccount = 2;
    AuthorityAccountOwner = 3;
    AuthorityCloseAccount = 4;
  }

  message SetAuthorityInstruction {
    AuthorityType authority_type = 1;
    optional string new_authority = 2;
  }

  message SetAuthorityAccounts {
    string account = 1;
    string current_authority = 2;
  }
}

// The instructions 'MintTo' and 'MintToChecked' are both represented by this message.
// You can check if the instructions was 'MintToChecked' by inspecting the
// 'instruction.decimals' field. If set, it was a 'MintToChecked' instruction.
message MintTo {
  MintToInstruction instruction = 1;
  MintToAccounts accounts = 2;

  message MintToInstruction {
    uint64 amount = 1;
    // Only set if the instruction was 'MintToChecked'
    optional uint32 decimals = 2;
  }

  message MintToAccounts {
    string mint = 1;
    string destination = 2;
    Signer mint_authority = 3;
  }
}

// The instructions 'Burn' and 'BurnChecked' are both represented by this message.
// You can check if the instructions was 'BurnChecked' by inspecting the
// 'instruction.decimals' field. If set, it was a 'BurnChecked' instruction.
message Burn {
  BurnInstruction instruction = 1;
  BurnAccounts accounts = 2;

  message BurnInstruction {
    uint64 amount = 1;
    // Only set if the instruction was 'BurnChecked'
    optional uint32 decimals = 2;
  }

  message BurnAccounts {
    string source = 1;
    string mint = 2;
    Signer signer = 3;
  }
}

message CloseAccount {
  CloseAccountInstruction instruction = 1;
  CloseAccountAccounts accounts = 2;

  message CloseAccountInstruction {
  }

  message CloseAccountAccounts {
    string account = 1;
    string destination = 2;
    Signer signer = 3;
  }
}

message FreezeAccount {
  FreezeAccountInstruction instruction = 1;
  FreezeAccountAccounts accounts = 2;

  message FreezeAccountInstruction {
  }

  message FreezeAccountAccounts {
    string account = 1;
    string mint = 2;
    Signer mint_freeze_authority = 3;
  }
}

message ThawAccount {
  ThawAccountInstruction instruction = 1;
  ThawAccountAccounts accounts = 2;

  message ThawAccountInstruction {
  }

  message ThawAccountAccounts {
    string account = 1;
    string mint = 2;
    Signer mint_freeze_authority = 3;
  }
}

message InitializeImmutableOwner {
  InitializeImmutableOwnerInstruction instruction = 1;
  InitializeImmutableOwnerAccounts accounts = 2;

  message InitializeImmutableOwnerInstruction {

  }

  message InitializeImmutableOwnerAccounts {
    string account = 1;
  }
}

message SyncNative {
  SyncNativeInstruction instruction = 1;
  SyncNativeAccounts accounts = 2;

  message SyncNativeInstruction {
  }

  message SyncNativeAccounts {
    string native_token_account = 1;
  }
}

message Signer {
  oneof kind {
    SingleSignature single = 1;
    MultiSignature multisig = 2;
  }
}

message SingleSignature {
  string signer = 1;
}

message MultiSignature {
  string multisig_account = 1;
  repeated string signers = 2;
}